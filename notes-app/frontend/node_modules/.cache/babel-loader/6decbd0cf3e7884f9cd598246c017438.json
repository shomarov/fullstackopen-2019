{"ast":null,"code":"import _slicedToArray from \"/home/artur/Study/fullstackopen-2019/notes-app/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/artur/Study/fullstackopen-2019/notes-app/frontend/src/components/Togglable.js\";\nimport React, { useState, useImperativeHandle } from 'react';\nimport PropTypes from 'prop-types';\nconst Togglable = React.forwardRef((props, ref) => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        visible = _useState2[0],\n        setVisible = _useState2[1];\n\n  const hideWhenVisible = {\n    display: visible ? 'none' : ''\n  };\n  const showWhenVisible = {\n    display: visible ? '' : 'none'\n  };\n\n  const toggleVisibility = () => {\n    setVisible(!visible);\n  };\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    };\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: hideWhenVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: toggleVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, props.buttonLabel)), React.createElement(\"div\", {\n    style: showWhenVisible,\n    className: \"togglableContent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, props.children, React.createElement(\"button\", {\n    onClick: toggleVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"cancel\")));\n});\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n};\nexport default Togglable;","map":{"version":3,"sources":["/home/artur/Study/fullstackopen-2019/notes-app/frontend/src/components/Togglable.js"],"names":["React","useState","useImperativeHandle","PropTypes","Togglable","forwardRef","props","ref","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","buttonLabel","children","propTypes","string","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,mBAA1B,QAAqD,OAArD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,MAAMC,SAAS,GAAGJ,KAAK,CAACK,UAAN,CAAiB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAAA,oBACnBN,QAAQ,CAAC,KAAD,CADW;AAAA;AAAA,QAC1CO,OAD0C;AAAA,QACjCC,UADiC;;AAGjD,QAAMC,eAAe,GAAG;AAAEC,IAAAA,OAAO,EAAEH,OAAO,GAAG,MAAH,GAAY;AAA9B,GAAxB;AACA,QAAMI,eAAe,GAAG;AAAED,IAAAA,OAAO,EAAEH,OAAO,GAAG,EAAH,GAAQ;AAA1B,GAAxB;;AAEA,QAAMK,gBAAgB,GAAG,MAAM;AAC7BJ,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,GAFD;;AAIAN,EAAAA,mBAAmB,CAACK,GAAD,EAAM,MAAM;AAC7B,WAAO;AACLM,MAAAA;AADK,KAAP;AAGD,GAJkB,CAAnB;AAMA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,KAAK,EAAEH,eAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,OAAO,EAAEG,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoCP,KAAK,CAACQ,WAA1C,CADF,CADF,EAIE;AAAK,IAAA,KAAK,EAAEF,eAAZ;AAA6B,IAAA,SAAS,EAAC,kBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,KAAK,CAACS,QADT,EAEE;AAAQ,IAAA,OAAO,EAAEF,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CAJF,CADF;AAWD,CA3BiB,CAAlB;AA6BAT,SAAS,CAACY,SAAV,GAAsB;AACpBF,EAAAA,WAAW,EAAEX,SAAS,CAACc,MAAV,CAAiBC;AADV,CAAtB;AAIA,eAAed,SAAf","sourcesContent":["import React, { useState, useImperativeHandle } from 'react'\nimport PropTypes from 'prop-types'\n\nconst Togglable = React.forwardRef((props, ref) => {\n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  const toggleVisibility = () => {\n    setVisible(!visible)\n  }\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    }\n  })\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n      </div>\n      <div style={showWhenVisible} className=\"togglableContent\">\n        {props.children}\n        <button onClick={toggleVisibility}>cancel</button>\n      </div>\n    </div>\n  )\n})\n\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n}\n\nexport default Togglable"]},"metadata":{},"sourceType":"module"}