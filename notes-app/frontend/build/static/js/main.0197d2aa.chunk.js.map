{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","className","content","onClick","services_notes","axios","get","then","response","data","newObject","post","put","concat","id","Notification","message","Footer","style","color","fontStyle","fontSize","App","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","errorMessage","setErrorMessage","NotesToShow","filter","useEffect","noteService","initialNotes","components_Notification","map","components_Note","key","find","n","changedNote","objectSpread","returnedNote","catch","error","setTimeout","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","value","onChange","target","type","App_Footer","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.0197d2aa.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n  ? 'make not important' : 'make important'\n  return (\n    <li className='note'>\n    {note.content}\n    <button onClick= {toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (newObject) => {\n    const request = axios.put(`${baseUrl}/${newObject.id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    }\n\n    return (\n        <div style={footerStyle}>\n            <br />\n            <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\n        </div>\n    )\n}\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    const NotesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important)\n\n    useEffect(() => {\n        noteService\n            .getAll()\n            .then(initialNotes => {\n                setNotes(initialNotes)\n            })\n    }, [])\n\n    const toggleImportance = id => {\n        const note = notes.find(n => n.id === id)\n        const changedNote = { ...note, important: !note.important }\n\n        noteService\n            .update(changedNote)\n            .then(returnedNote => {\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n            })\n            .catch(error => {\n                setErrorMessage(\n                    `Note '${note.content}' was already removed from server`\n                )\n                setTimeout(() => {\n                    setErrorMessage(null)\n                }, 5000)\n                setNotes(notes.filter(n => n.id !== id))\n            })\n    }\n\n    const addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() > 0.5,\n            id: notes.length + 1\n        }\n\n        noteService\n            .create(noteObject)\n            .then(returnedNote => {\n                setNotes(notes.concat(returnedNote))\n                setNewNote('')\n            })\n\n    }\n\n    const rows = () => NotesToShow.map(note =>\n        <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportance(note.id)}\n        />\n    )\n\n    const handleNoteChange = (event) => {\n        setNewNote(event.target.value)\n    }\n\n    return (\n        <div>\n            <h1>Notes</h1>\n\n            <Notification message={errorMessage} />\n\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>\n                {rows()}\n            </ul>\n            <form onSubmit={addNote}>\n                <input\n                    value={newNote}\n                    onChange={handleNoteChange}\n                />\n                <button type=\"submit\">save</button>\n            </form>\n            <Footer />\n        </div>\n    )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport React from 'react'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}